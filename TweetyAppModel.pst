<?xml version="1.0"?><st-source><!-- Name: TweetyAppModelComment: Interfaz App Model 1.cada ventana en una class.DbIdentifier: nilDbTrace: nilPackageName: TweetyAppModelParcel: #('TweetyAppModel')ParcelDirectory: TweetyAppModelPrintStringCache: nilPost-Load Block: 	[:package | TweetyAdministradorView postLoadActionFor:package.                    TweetyLoginView postLoadActionFor:package.]Date: 7:14:44 PM May 10, 2012 --><time-stamp>From VisualWorksÂ® Personal Use Edition, 7.8 of March 30, 2011 on May 10, 2012 at 7:14:44 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>TweetyAddSiguiendoView</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inputBuscar datos nombre listContacts user </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TweetyAppModel</package></attributes></class><comment><class-id>TweetyAddSiguiendoView</class-id><body>TweetyAddSiguiendoViewes el app de la ventana agregar un contacto a seguirInstance Variables	datos	&lt;ValueModel&gt;	description of datos	inputBuscar	&lt;ValueModel&gt;	description of inputBuscar	listContacts	&lt;SelectionInList&gt;	description of listContacts	nombre	&lt;ValueModel&gt;	description of nombre	user	&lt;Usuario&gt;	description of user</body></comment><class><name>TweetyAdministradorView</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>clave administrador </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TweetyAppModel</package></attributes></class><comment><class-id>TweetyAdministradorView</class-id><body>TweetyAdministradorView es el app de la ventana de administracion del sistema, esto es el control de los usuarios del sistema y la password sel sistema..Instance Variables	administrador	&lt;MessageForwarder | Object | ProtoObject | ProtoObject | Proxy&gt;	description of administrador	clave	&lt;ValueModel&gt;	description of clave</body></comment><class><name>TweetyEditPersonalView</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listGroup listContacts inputName dataEditor inputNPass inputPass inputNick user </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TweetyAppModel</package></attributes></class><comment><class-id>TweetyEditPersonalView</class-id><body>TweetyEditPersonalView es el app de la ventana de editar los datos personales del usuario.Instance Variables	dataEditor	&lt;ValueModel&gt;	description of dataEditor	inputName	&lt;ValueModel&gt;	description of inputName	inputNick	&lt;ValueModel&gt;	description of inputNick	inputNPass	&lt;ValueModel&gt;	description of inputNPass	inputPass	&lt;ValueModel&gt;	description of inputPass	listContacts	&lt;MessageForwarder | Object | ProtoObject | ProtoObject | Proxy&gt;	description of listContacts	listGroup	&lt;MessageForwarder | Object | ProtoObject | ProtoObject | Proxy&gt;	description of listGroup	user	&lt;Usuario&gt;	description of user</body></comment><class><name>TweetySendView</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sends user </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TweetyAppModel</package></attributes></class><comment><class-id>TweetySendView</class-id><body>TweetySendView es el app de la ventana de mensajes enviados.Instance Variables	sends	&lt;SelectionInList&gt;	description of sends	user	&lt;Usuario&gt;	description of user</body></comment><class><name>TweetySiguiendoView</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>contact dataText listContacts user </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TweetyAppModel</package></attributes></class><comment><class-id>TweetySiguiendoView</class-id><body>TweetySiguiendoView es el app de la ventana en donde se ve a quien sigue el usuario la posibilidad de crear uno nuevo o borrar .Instance Variables	contact	&lt;ValueModel&gt;	description of contact	dataText	&lt;ValueModel&gt;	description of dataText	listContacts	&lt;SelectionInList&gt;	description of listContacts	user	&lt;Usuario&gt;	description of user</body></comment><class><name>TweetyEditGroupView</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listGroup listContacts group inputGroup </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TweetyAppModel</package></attributes></class><comment><class-id>TweetyEditGroupView</class-id><body>TweetyEditGroupView es el app de la ventana de donde se configura que contactos forman parte del grupo.Instance Variables	group	&lt;Grupo&gt;	description of group	inputGroup	&lt;ValueHolder&gt;	description of inputGroup	listContacts	&lt;SelectionInList&gt;	description of listContacts	listGroup	&lt;SelectionInList&gt;	description of listGroup</body></comment><class><name>TweetySeguidoresView</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>contact dataContact listContacts user </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TweetyAppModel</package></attributes></class><comment><class-id>TweetySeguidoresView</class-id><body>TweetySeguidoresView es el app de la ventana donde se ve quien sigue al usuario.Instance Variables	contact	&lt;ValueModel&gt;	description of contact	dataContact	&lt;ValueModel&gt;	description of dataContact	listContacts	&lt;SelectionInList&gt;	description of listContacts	user	&lt;Usuario&gt;	description of user</body></comment><class><name>TweetySistemaView</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaUsuarios sistema clave inputPass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TweetyAppModel</package></attributes></class><comment><class-id>TweetySistemaView</class-id><body>TweetySistema es el app de la ventana del sistema donde puedo ver los usuarios del sistema y cambiar password.Instance Variables	clave	&lt;MessageForwarder | Object | ProtoObject | ProtoObject | Proxy&gt;	description of clave	inputPass	&lt;ValueModel&gt;	description of inputPass	listaUsuarios	&lt;SelectionInList&gt;	description of listaUsuarios	sistema	&lt;Sistema&gt;	description of sistema</body></comment><class><name>TweetyMainView</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mensajes editarMensaje usuario menuGrupo menuGrupoElegido </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TweetyAppModel</package></attributes></class><comment><class-id>TweetyMainView</class-id><body>TweetyMainView es el app de la ventana principal del applicativo </body></comment><class><name>TweetyAddGroupView</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>user newGroup </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TweetyAppModel</package></attributes></class><comment><class-id>TweetyAddGroupView</class-id><body>TweetyAddGroupView es el app de la ventana de agregar grupoInstance Variables	newGroup	&lt;ValueModel&gt;	description of newGroup	user	&lt;Usuario&gt;	description of user</body></comment><class><name>TweetyFormView</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dataHolder nickHolder npassHolder nameHolder passHolder sistema </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TweetyAppModel</package></attributes></class><comment><class-id>TweetyFormView</class-id><body>Missing comment</body></comment><class><name>TweetyGroupView</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>user listGroups </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TweetyAppModel</package></attributes></class><comment><class-id>TweetyGroupView</class-id><body>TweetyGroupView es el app de la ventana control/creacion/eliminacion de un grupo </body></comment><class><name>TweetyLoginView</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sistema nick password </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TweetyAppModel</package></attributes></class><comment><class-id>TweetyLoginView</class-id><body>TweetyLoginView es el app de la ventana de logeo.Instance Variables	nick	&lt;ValueModel&gt;	description of nick	password	&lt;ValueModel&gt;	description of password	sistema	&lt;Sistema&gt;	description of sistema</body></comment><methods><class-id>TweetyAddSiguiendoView</class-id> <category>aspects</category><body package="TweetyAppModel" selector="datos">datos	datos isNil ifTrue: [^datos := String new asValue].	^datos</body><body package="TweetyAppModel" selector="inputBuscar">inputBuscar	inputBuscar isNil ifTrue: [^inputBuscar := String new asValue].	^inputBuscar</body><body package="TweetyAppModel" selector="listContactsSeguidores">listContactsSeguidores	listContacts isNil ifTrue: [^listContacts := SelectionInList new].	^listContacts</body><body package="TweetyAppModel" selector="nombre">nombre	nombre isNil ifTrue: [^nombre := String new asValue].	^nombre</body></methods><methods><class-id>TweetyAddSiguiendoView</class-id> <category>actions</category><body package="TweetyAppModel" selector="addContacto">addContacto	listContacts selection isNil		ifFalse: 			[user agregarA: listContacts selection.			Dialog warn: 'Agregado'].	^self</body><body package="TweetyAppModel" selector="buscarContacto">buscarContacto	| u |	listContacts list: OrderedCollection new.	(u := Sistema getInstance buscar: self inputBuscar value) isNil ifFalse: [listContacts list add: u].	listContacts list addAll: (Sistema getInstance buscarPorNombre: self inputBuscar value).	listContacts list: listContacts list.	^self</body></methods><methods><class-id>TweetyAddSiguiendoView</class-id> <category>changing</category><body package="TweetyAppModel" selector="changeContactSelection">changeContactSelection	listContacts selection isNil		ifFalse: 			[nombre value: listContacts selection nombre.			datos value: listContacts selection datos].	^self</body></methods><methods><class-id>TweetyAddSiguiendoView</class-id> <category>initialize-release</category><body package="TweetyAppModel" selector="initialize:">initialize: unUser	user := unUser.	^self</body></methods><methods><class-id>TweetyAddSiguiendoView class</class-id> <category>instance creation</category><body package="TweetyAppModel" selector="new:">new: anUser	^super new initialize: anUser</body></methods><methods><class-id>TweetyAdministradorView</class-id> <category>initialize-release</category><body package="TweetyAppModel" selector="initialize">initialize	super initialize.	^self</body></methods><methods><class-id>TweetyAdministradorView</class-id> <category>actions</category><body package="TweetyAppModel" selector="login">login	(Administrador getInstance: self clave value) notNil		ifTrue: 			[self closeRequest.			^(TweetySistemaView new: clave value) open].	Dialog warn: 'Clave no valida'.	^self</body></methods><methods><class-id>TweetyAdministradorView</class-id> <category>aspects</category><body package="TweetyAppModel" selector="clave">clave	clave isNil ifTrue: [^clave := String new asValue].	^clave</body></methods><methods><class-id>TweetyAdministradorView class</class-id> <category>interface specs</category><body package="TweetyAppModel" selector="postLoadActionFor:">postLoadActionFor: aParcel	(Workspace		with: '"Desde Login podemos crear usuarios y logearnos"(TweetyLoginView new)  open."Para acceder al administrador la clave es tweety".(TweetyAdministradorView new)  open."Usado para ver el sistema por dentro"Sistema inspect. ')			open.	(TweetySistemaView new: 'tweety') open.	^self</body></methods><methods><class-id>TweetyEditPersonalView</class-id> <category>aspects</category><body package="TweetyAppModel" selector="dataEditor">dataEditor	dataEditor isNil ifTrue: [^dataEditor := String new asValue].	^dataEditor</body><body package="TweetyAppModel" selector="inputNPass">inputNPass	inputNPass isNil ifTrue: [^inputNPass := String new asValue].	^inputNPass</body><body package="TweetyAppModel" selector="inputName">inputName	inputName isNil ifTrue: [^inputName := String new asValue].	^inputName</body><body package="TweetyAppModel" selector="inputNick">inputNick	inputNick isNil ifTrue: [^inputNick := String new asValue].	^inputNick</body><body package="TweetyAppModel" selector="inputPass">inputPass	inputPass isNil ifTrue: [^inputPass := String new asValue].	^inputPass</body></methods><methods><class-id>TweetyEditPersonalView</class-id> <category>accessing</category><body package="TweetyAppModel" selector="user">user	^user</body><body package="TweetyAppModel" selector="user:">user: anUser	user := anUser.	^self</body></methods><methods><class-id>TweetyEditPersonalView</class-id> <category>actions</category><body package="TweetyAppModel" selector="cambiar">cambiar	self inputPass value == self inputNPass value		ifTrue: 			[user nombre: self inputName value.			user clave: self inputPass value.			user datos: self dataEditor value.			self closeRequest]		ifFalse: [Dialog warn: 'Las passwords no coinciden'].	^self</body></methods><methods><class-id>TweetyEditPersonalView</class-id> <category>initialize-release</category><body package="TweetyAppModel" selector="initialize:">initialize: anUserself inputNick value: (anUser nick).self inputName value: (anUser nombre).self inputPass value: ''.self inputNPass value: ''.self dataEditor value: (anUser datos).user := anUser.</body></methods><methods><class-id>TweetyEditPersonalView class</class-id> <category>instance creation</category><body package="TweetyAppModel" selector="new:">new: anUser	^super new initialize: anUser</body></methods><methods><class-id>TweetySendView</class-id> <category>aspects</category><body package="TweetyAppModel" selector="sends">sends	sends isNil ifTrue: [^sends := SelectionInList with: user listaEnviados reverse].	^sends</body></methods><methods><class-id>TweetySendView</class-id> <category>updating</category><body package="TweetyAppModel" selector="update:">update: aSymbol	aSymbol = #mensajesEnviados ifTrue: [sends list: user listaEnviados reverse].	^self</body></methods><methods><class-id>TweetySendView</class-id> <category>changing</category><body package="TweetyAppModel" selector="redisplayList">redisplayList	(self builder componentAt: #sends) widget invalidate.	^self</body></methods><methods><class-id>TweetySendView</class-id> <category>instance creation</category><body package="TweetyAppModel" selector="initialize:">initialize: anUser	(user := anUser) addDependent: self.	^self</body></methods><methods><class-id>TweetySendView class</class-id> <category>instance creation</category><body package="TweetyAppModel" selector="new:">new: anUser	^super new initialize: anUser</body></methods><methods><class-id>TweetySiguiendoView</class-id> <category>aspects</category><body package="TweetyAppModel" selector="contact">contact	contact isNil ifTrue: [^contact := String new asValue].	^contact</body><body package="TweetyAppModel" selector="data">data	dataText isNil ifTrue: [^dataText := String new asValue].	^dataText</body><body package="TweetyAppModel" selector="listContacts">listContacts	listContacts isNil ifTrue: [^listContacts := SelectionInList with: user listaSiguiendo asOrderedCollection].	^listContacts</body></methods><methods><class-id>TweetySiguiendoView</class-id> <category>updating</category><body package="TweetyAppModel" selector="update:">update: aSymbol	(aSymbol = #agregarASiguiendo or: [aSymbol = #eliminarDeSiguiendo]) ifTrue: [listContacts list: user listaSiguiendo asOrderedCollection].	^self</body></methods><methods><class-id>TweetySiguiendoView</class-id> <category>actions</category><body package="TweetyAppModel" selector="addContacto">addContacto	^(TweetyAddSiguiendoView new: user) open</body><body package="TweetyAppModel" selector="delContacto">delContacto	listContacts selection isNil ifFalse: [user eliminarDe: self listContacts selection].	^self</body></methods><methods><class-id>TweetySiguiendoView</class-id> <category>changing</category><body package="TweetyAppModel" selector="changeContactSelection">changeContactSelection	listContacts selection isNil		ifFalse: 			[contact value: listContacts selection nombre.			dataText value: listContacts selection datos].	^self</body><body package="TweetyAppModel" selector="redisplayList">redisplayList	(self builder componentAt: #listContacts) widget invalidate.	^self</body></methods><methods><class-id>TweetySiguiendoView</class-id> <category>instance creation</category><body package="TweetyAppModel" selector="initialize:">initialize: unUser	(user := unUser) addDependent: self.	^self</body></methods><methods><class-id>TweetySiguiendoView class</class-id> <category>instance creation</category><body package="TweetyAppModel" selector="new:">new: unUser	^super new initialize: unUser</body></methods><methods><class-id>TweetyEditGroupView</class-id> <category>aspects</category><body package="TweetyAppModel" selector="inputGroup">inputGroup	inputGroup isNil ifTrue: [^inputGroup := String new asValue].	^inputGroup</body><body package="TweetyAppModel" selector="listContactsSeguidores">listContactsSeguidores	listContacts isNil ifTrue: [^listContacts := SelectionInList new].	^listContacts</body><body package="TweetyAppModel" selector="listGroup">listGroup	listGroup isNil ifTrue: [^listGroup := SelectionInList with: group listaContactos asOrderedCollection].	^listGroup</body></methods><methods><class-id>TweetyEditGroupView</class-id> <category>actions</category><body package="TweetyAppModel" selector="addContact">addContact	listContacts selection isNil		ifFalse: 			[(listGroup list includes: listContacts selection)				ifFalse: 					[listGroup list add: listContacts selection.					listContacts list remove: listContacts selection.					listContacts list: listContacts list.					listGroup list: listGroup list]].	^self</body><body package="TweetyAppModel" selector="removeContact">removeContact	listGroup selection isNil		ifFalse: 			[(listContacts list includes: listGroup selection)				ifFalse: 					[listContacts list add: listGroup selection.					listGroup list remove: listGroup selection.					listContacts list: listContacts list.					listGroup list: listGroup list]].	^self</body><body package="TweetyAppModel" selector="saveGroupList">saveGroupList	group listaContactos: listGroup list.	self closeRequest.	^self</body></methods><methods><class-id>TweetyEditGroupView</class-id> <category>initialize-release</category><body package="TweetyAppModel" selector="initialize:with:">initialize: grupo with: contactos	| g |	g := grupo listaContactos asOrderedCollection.	listContacts := SelectionInList with: (contactos asOrderedCollection select: [:con | (g includes: con) not]).	group := grupo.	inputGroup := grupo nombre asValue.	^self</body></methods><methods><class-id>TweetyEditGroupView class</class-id> <category>instance creation</category><body package="TweetyAppModel" selector="new:with:">new: grupo with: contactos	^self new initialize: grupo with: contactos</body></methods><methods><class-id>TweetySeguidoresView</class-id> <category>aspects</category><body package="TweetyAppModel" selector="contact">contact	contact isNil ifTrue: [^contact := String new asValue].	^contact</body><body package="TweetyAppModel" selector="dataContact">dataContact	dataContact isNil ifTrue: [^dataContact := String new asValue].	^dataContact</body><body package="TweetyAppModel" selector="listContacts">listContacts	listContacts isNil ifTrue: [^listContacts := SelectionInList with: user listaContactos asOrderedCollection].	^listContacts</body></methods><methods><class-id>TweetySeguidoresView</class-id> <category>updating</category><body package="TweetyAppModel" selector="update:">update: aSymbol	(aSymbol = #agregarContacto or: [aSymbol = #eliminarContacto]) ifTrue: [listContacts list: user listaContactos asOrderedCollection].	^self</body></methods><methods><class-id>TweetySeguidoresView</class-id> <category>actions</category><body package="TweetyAppModel" selector="delContacto">delContacto	listContacts selection isNil ifFalse: [user eliminarContacto: self listContacts selection].	^self</body></methods><methods><class-id>TweetySeguidoresView</class-id> <category>changing</category><body package="TweetyAppModel" selector="changeContactSelection">changeContactSelection	listContacts selection isNil		ifFalse: 			[contact value: listContacts selection nombre.			dataContact value: listContacts selection datos].	^self</body><body package="TweetyAppModel" selector="redisplayList">redisplayList	(self builder componentAt: #listContacts) widget invalidate.	^self</body></methods><methods><class-id>TweetySeguidoresView</class-id> <category>instance creation</category><body package="TweetyAppModel" selector="initialize:">initialize: anUser	(user := anUser) addDependent: self.	^self</body></methods><methods><class-id>TweetySistemaView</class-id> <category>aspects</category><body package="TweetyAppModel" selector="inputPass">inputPass	inputPass isNil ifTrue: [^inputPass := String new asValue].	^inputPass</body><body package="TweetyAppModel" selector="listaUsuarios">listaUsuarios	listaUsuarios isNil ifTrue: [^listaUsuarios := SelectionInList with: sistema users misUsuarios].	^listaUsuarios</body></methods><methods><class-id>TweetySistemaView</class-id> <category>updating</category><body package="TweetyAppModel" selector="update:">update: aSymbol	(aSymbol = #agregarUser or: [aSymbol = #eliminarUser]) ifTrue: [listaUsuarios list: sistema users misUsuarios].	^self</body></methods><methods><class-id>TweetySistemaView</class-id> <category>actions</category><body package="TweetyAppModel" selector="borrar">borrar	listaUsuarios selection isNil ifFalse: [sistema eliminar: self listaUsuarios selection validadoPor: clave].	^self</body><body package="TweetyAppModel" selector="close">close	^self save closeRequest</body><body package="TweetyAppModel" selector="inspeccionar">inspeccionar	listaUsuarios selection isNil ifFalse: [self listaUsuarios selection inspect].	^self</body><body package="TweetyAppModel" selector="password">password	(inputPass value isNil or: [inputPass value = ''])		ifFalse: 			[(Administrador getInstance: clave) clave: inputPass value.			clave := inputPass value.			inputPass value: nil].	^self</body><body package="TweetyAppModel" selector="save">save	sistema users guardarLista.	^self</body></methods><methods><class-id>TweetySistemaView</class-id> <category>changing</category><body package="TweetyAppModel" selector="redisplayList">redisplayList	(self builder componentAt: #listaUsuarios) widget invalidate.	^self</body></methods><methods><class-id>TweetySistemaView</class-id> <category>initialize-release</category><body package="TweetyAppModel" selector="initialize:">initialize: unaClave	clave := unaClave.	(sistema := Sistema getInstance) addDependent: self.	^self</body></methods><methods><class-id>TweetySistemaView class</class-id> <category>instance creation</category><body package="TweetyAppModel" selector="new:">new: administrador	^super new initialize: administrador</body></methods><methods><class-id>TweetyMainView</class-id> <category>aspects</category><body package="TweetyAppModel" selector="crearMenu">crearMenu	| mb |	mb := (MenuBuilder new)				add: 'a todos' -&gt; nil;				line.	self usuario listaGrupos do: [:g | mb add: g nombre -&gt; g].	^mb menu</body><body package="TweetyAppModel" selector="editarMensaje">editarMensaje	editarMensaje isNil ifTrue: [^editarMensaje := String new asValue].	^editarMensaje</body><body package="TweetyAppModel" selector="login">login	^'Tweety@' , self usuario nick</body><body package="TweetyAppModel" selector="mensajes">mensajes	^mensajes isNil		ifTrue:			[mensajes := SelectionInList with: (usuario listaRecibidos reverse)]		ifFalse:			[mensajes]</body><body package="TweetyAppModel" selector="menuGrupo">menuGrupo	menuGrupo isNil ifTrue: [^menuGrupo := self crearMenu asValue].	^menuGrupo</body><body package="TweetyAppModel" selector="menuGrupoElegido">menuGrupoElegido	menuGrupoElegido isNil ifTrue: [^menuGrupoElegido := nil asValue].	^menuGrupoElegido</body></methods><methods><class-id>TweetyMainView</class-id> <category>updating</category><body package="TweetyAppModel" selector="update:">update: aSymbol	aSymbol = #mensajesRecibidos ifTrue: [mensajes list: usuario listaRecibidos reverse].	(aSymbol = #nuevoGrupo or: [aSymbol = #grupoBorrado])		ifTrue: [menuGrupo value: self crearMenu].	^self</body></methods><methods><class-id>TweetyMainView</class-id> <category>actions</category><body package="TweetyAppModel" selector="editarGrupo">editarGrupo	^(TweetyGroupView new: usuario) open</body><body package="TweetyAppModel" selector="editarPersonal">editarPersonal	^(TweetyEditPersonalView new: usuario) open</body><body package="TweetyAppModel" selector="enviar">enviar	self editarMensaje value = ''		ifFalse: 			[self menuGrupoElegido value == nil				ifTrue: 					[self usuario enviar: self editarMensaje value.					self editarMensaje value: '']				ifFalse: 					[self usuario enviar: self editarMensaje value a: self menuGrupoElegido value.					self editarMensaje value: '']].	^self</body><body package="TweetyAppModel" selector="mostrarEnviados">mostrarEnviados	^(TweetySendView new: usuario) open</body><body package="TweetyAppModel" selector="reenviar">reenviar	"This stub method was generated by UIDefiner"	mensajes selection = nil		ifFalse: 			[self menuGrupoElegido value == nil				ifTrue: 					[self usuario enviar: self mensajes selection cuerpo.					self mensajes selection: nil]				ifFalse: 					[self usuario enviar: self mensajes selection cuerpo a: self menuGrupoElegido value.					self mensajes selection: nil]].	^self</body><body package="TweetyAppModel" selector="seguidoresContacto">seguidoresContacto	^(TweetySeguidoresView new: usuario) open</body><body package="TweetyAppModel" selector="siguiendoContacto">siguiendoContacto	^(TweetySiguiendoView new: usuario) open</body><body package="TweetyAppModel" selector="usuario">usuario	^usuario</body></methods><methods><class-id>TweetyMainView</class-id> <category>instance creation</category><body package="TweetyAppModel" selector="initialize:">initialize: anUser	(usuario := anUser) addDependent: self.	^self</body></methods><methods><class-id>TweetyMainView</class-id> <category>changing</category><body package="TweetyAppModel" selector="redisplayList">redisplayList	(self builder componentAt: #mensajes) widget invalidate.	^self</body></methods><methods><class-id>TweetyMainView class</class-id> <category>instance creation</category><body package="TweetyAppModel" selector="new:">new: unUsuario	^super new initialize: unUsuario</body></methods><methods><class-id>TweetyAddGroupView</class-id> <category>aspects</category><body package="TweetyAppModel" selector="newGroup">newGroup	newGroup isNil ifTrue: [^newGroup := String new asValue].	^newGroup</body></methods><methods><class-id>TweetyAddGroupView</class-id> <category>actions</category><body package="TweetyAppModel" selector="addGroup">addGroup	user crearGrupo: self newGroup value.	self closeRequest.	^self</body></methods><methods><class-id>TweetyAddGroupView</class-id> <category>initialize-release</category><body package="TweetyAppModel" selector="initialize:">initialize: anUser	user := anUser.	^self</body></methods><methods><class-id>TweetyAddGroupView class</class-id> <category>instance creation</category><body package="TweetyAppModel" selector="new:">new: anUser	^super new initialize: anUser</body></methods><methods><class-id>TweetyFormView</class-id> <category>aspects</category><body package="TweetyAppModel" selector="dataHolder">dataHolder	dataHolder isNil ifTrue: [^dataHolder := String new asValue].	^dataHolder</body><body package="TweetyAppModel" selector="nameHolder">nameHolder	nameHolder isNil ifTrue: [^nameHolder := String new asValue].	^nameHolder</body><body package="TweetyAppModel" selector="nickHolder">nickHolder	nickHolder isNil ifTrue: [^nickHolder := String new asValue].	^nickHolder</body><body package="TweetyAppModel" selector="npassHolder">npassHolder	npassHolder isNil ifTrue: [^npassHolder := String new asValue].	^npassHolder</body><body package="TweetyAppModel" selector="passHolder">passHolder	passHolder isNil ifTrue: [^passHolder := String new asValue].	^passHolder</body></methods><methods><class-id>TweetyFormView</class-id> <category>actions</category><body package="TweetyAppModel" selector="crear">crear	(sistema existe: self nickHolder value)		ifTrue: 			[self nickHolder value: ''.			Dialog warn: 'Nick existente']		ifFalse: 			[self passHolder value = self npassHolder value				ifTrue: 					[self closeRequest.					^sistema agregar: (Usuario							new: self nickHolder value							nombre: self nameHolder value							datos: self dataHolder value							clave: self passHolder value)].			self passHolder value: ''.			self npassHolder value: ''.			Dialog warn: 'Las claves no coinciden'].	^self</body></methods><methods><class-id>TweetyFormView</class-id> <category>instance creation</category><body package="TweetyAppModel" selector="initialize">initialize	sistema := Sistema getInstance.	^self</body></methods><methods><class-id>TweetyFormView class</class-id> <category>instance creation</category><body package="TweetyAppModel" selector="new">new	^super new initialize</body></methods><methods><class-id>TweetyGroupView</class-id> <category>aspects</category><body package="TweetyAppModel" selector="listGroups">listGroups	listGroups isNil ifTrue: [^listGroups := SelectionInList with: user listaGrupos].	^listGroups</body></methods><methods><class-id>TweetyGroupView</class-id> <category>updating</category><body package="TweetyAppModel" selector="update:">update: aSymbol	(aSymbol = #nuevoGrupo or: [aSymbol = #grupoBorrado])		ifTrue: [listGroups list: user listaGrupos].	^self</body></methods><methods><class-id>TweetyGroupView</class-id> <category>actions</category><body package="TweetyAppModel" selector="delGroup">delGroup	listGroups selection isNil ifFalse: [user eliminarGrupo: listGroups selection].	^self</body><body package="TweetyAppModel" selector="editGroup">editGroup	listGroups selection isNil ifFalse: [^(TweetyEditGroupView new: listGroups selection with: user listaContactos) open].	^self</body><body package="TweetyAppModel" selector="newGroup">newGroup	^(TweetyAddGroupView new: user) open</body></methods><methods><class-id>TweetyGroupView</class-id> <category>changing</category><body package="TweetyAppModel" selector="redisplayList">redisplayList	(self builder componentAt: #listGroups) widget invalidate.	^self</body></methods><methods><class-id>TweetyGroupView</class-id> <category>initialize-release</category><body package="TweetyAppModel" selector="initialize:">initialize: anUser	(user := anUser) addDependent: self.	^self</body></methods><methods><class-id>TweetyGroupView class</class-id> <category>instance creation</category><body package="TweetyAppModel" selector="new:">new: anUser	^super new initialize: anUser</body></methods><methods><class-id>TweetyLoginView</class-id> <category>aspects</category><body package="TweetyAppModel" selector="nick">nick	nick isNil ifTrue: [^nick := String new asValue].	^nick</body><body package="TweetyAppModel" selector="password">password	password isNil ifTrue: [^password := String new asValue].	^password</body></methods><methods><class-id>TweetyLoginView</class-id> <category>actions menu</category><body package="TweetyAppModel" selector="nuevo">nuevo	^TweetyFormView new open</body></methods><methods><class-id>TweetyLoginView</class-id> <category>actions</category><body package="TweetyAppModel" selector="login">login	"This stub method was generated by UIDefiner"	| u |	(sistema existe: self nick value)		ifTrue: 			[u := sistema login: self nick value pass: self password value.			u notNil				ifTrue: 					["self closeRequest."					^(TweetyMainView new: u) open]				ifFalse: [self password value: '']]		ifFalse: 			[self nick value: ''.			self password value: ''.			Dialog warn: 'Usuario no valido']</body></methods><methods><class-id>TweetyLoginView</class-id> <category>initialize-release</category><body package="TweetyAppModel" selector="initialize">initialize	sistema := Sistema getInstance.	^self</body></methods><methods><class-id>TweetyLoginView class</class-id> <category>instance creation</category><body package="TweetyAppModel" selector="new">new	^super new initialize</body><body package="TweetyAppModel" selector="postLoadActionFor:">postLoadActionFor: aParcel	TweetyLoginView new open.	^self</body></methods><methods><class-id>TweetyMainView class</class-id> <category>interface specs</category><body package="TweetyAppModel" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 			#label: #login 			#bounds: #(#{Graphics.Rectangle} 315 138 709 463 ) 			#flags: 4 			#menu: #menu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.Rectangle} 352 5 395 53 ) 					#name: #MostrarEnviados 					#model: #mostrarEnviados 					#label: #image 					#hasCharacterOrientedLabel: false 					#defaultable: true ) 				#(#{UI.MenuButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 					#layout: #(#{Graphics.Rectangle} 242 2 342 30 ) 					#name: #MenuGrupo 					#model: #menuGrupoElegido 					#menu: #menuGrupo ) 				#(#{UI.ActionButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.Rectangle} 254 32 309 62 ) 					#name: #Enviar 					#model: #enviar 					#label: #iconenviar 					#hasCharacterOrientedLabel: false 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.Rectangle} 3 67 388 276 ) 					#name: #mensajes 					#model: #mensajes 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.Rectangle} 7 5 239 63 ) 					#name: #TextEditor1 					#model: #editarMensaje 					#tabRequiresControl: true ) 				#(#{UI.ActionButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.Rectangle} 317 34 350 62 ) 					#name: #ActionButton1 					#model: #reenviar 					#label: #resend 					#hasCharacterOrientedLabel: false 					#style: #'Arbor-10' 					#isDefault: false 					#defaultable: true ) ) ) )</body></methods><methods><class-id>TweetyMainView class</class-id> <category>resources</category><body package="TweetyAppModel" selector="enviar">enviar	"Tools.UIMaskEditor new openOnClass: self andSelector: #enviar"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 30@13 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5460 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 8191 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 21 85 85 80 0 32 0 0 23 255 255 82 0 40 0 0 29 255 253 210 170 170 0 0 31 127 87 210 170 170 128 0 95 213 255 82 170 170 0 0 127 223 127 66 0 40 0 0 127 127 223 64 0 32 0 0 85 85 85 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="TweetyAppModel" selector="iconenviar">iconenviar	"Tools.UIMaskEditor new openOnClass: self andSelector: #iconenviar"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 35@17 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5460 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 8191 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@EUUUUUT@@@@@@@@@G?????T@@@@@@@@@]????=P@@@@@@@@@__???7P@@H@@@@@@_7???_P(@J@@@@@@_=??=?P*** @@@@@_?_?W?PJ**(@@@@@_?5U_?P*** @@@@A_?=7?=P(@J@@@@@A??7=?=@@@H@@@@@A??_?_=@@@@@@@@@A?5??75@@@@@@@@@A?W??=5@@@@@@@@@AUUUUUU@@@@@@@@@@@@@@@@@@@@@@@@@'))</body><body package="TweetyAppModel" selector="resend">resend	"Tools.UIMaskEditor new openOnClass: self andSelector: #resend"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 19@13 depth: 1 bitsPerPixel: 1 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5461 5461 5461)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 8191 0)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[3 224 0 0 15 248 0 0 30 28 0 0 24 13 128 0 48 7 128 0 48 7 128 0 48 31 128 0 24 31 128 0 28 0 0 0 14 0 0 0 6 0 0 0 0 0 0 0 0 0 0 0])</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>